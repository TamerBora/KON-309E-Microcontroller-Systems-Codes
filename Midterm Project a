TIM_OCInitTypeDef TIM_OCInitStructure; // Output pin control for PWM 

int state = 0; // 0-> LED off, 1-> LED on, 2-> Blinking
int brightness = 0; // Brightness change 0-1000 
int time_count = 0;    // General time count
int rising = 0;        // When button pressed, rising flag changes to 1
int falling = 1;       // When button released, falling flag changes to 1
int flashlight_counter = 0; // Counter of flashlight 1000ms
int systick_time_flag = 0; // Every 10ms, systick_time_flag increases 
int initial = 0; // Flag for the first brightness setup 
int i = 0; // Used in EXTI for delay 
int long_click = 0; // Checks for a long click
int counter = 0; // Counter measures whether the click is short or double 
int direction = 1; // Determines brightness increase
int short_click = 0; // Checks for a short click
int double_click = 0; // Checks for a double click
int double_click_flag = 0; // Checks for the first click
int flashlight_brightness = 0; // Keeps the last brightness value for blinking
int countdown = 200; // Countdown timer to measure the time gap between double clicks
int short_click_flag = 0; // After the first falling edge, this variable becomes 1; afterward, countdown variable counts from 200ms to 0
int short_click_counter = 0; // After the falling edge, the time between 0 and 1000ms; takes values of the button's click count

void GPIO_Config(void) { // Setting for GPIO
    // Enable clock
    RCC_APB2PeriphClockCmd(LED_RCC_PORT, ENABLE);
    RCC_APB2PeriphClockCmd(BUTTON_RCC_PORT, ENABLE);

    // Parameters of the port structure
    GPIO_InitStruct.GPIO_Pin = RED_PIN;
    GPIO_InitStruct.GPIO_Speed = GPIO_Speed_50MHz;
    GPIO_InitStruct.GPIO_Mode = GPIO_Mode_AF_PP; // Alternative function push-pull for LED
    GPIO_Init(LED_PORT, &GPIO_InitStruct);

    GPIO_InitStruct.GPIO_Pin = BUTTON_PIN1;
    GPIO_InitStruct.GPIO_Mode = GPIO_Mode_IPD; // Input pull-down mode
    GPIO_Init(BUTTON_PORT, &GPIO_InitStruct);
}

void EXTI_Config(void) { // Setting for EXTI
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_AFIO, ENABLE); // External clock
    
    GPIO_EXTILineConfig(GPIO_PortSourceGPIOA, GPIO_PinSource3); // Button A3
    
    EXTI_InitStruct.EXTI_Line = EXTI_Line3;
    EXTI_InitStruct.EXTI_Mode = EXTI_Mode_Interrupt;
    EXTI_InitStruct.EXTI_LineCmd = ENABLE;
    EXTI_InitStruct.EXTI_Trigger = EXTI_Trigger_Rising_Falling; // When pressing button, instantly rising is 1; when released, falling edge is 1
    
    EXTI_Init(&EXTI_InitStruct);
    
    NVIC_InitStruct.NVIC_IRQChannel = EXTI3_IRQn;
    NVIC_InitStruct.NVIC_IRQChannelCmd = ENABLE;
    NVIC_InitStruct.NVIC_IRQChannelPreemptionPriority = 0;
    NVIC_InitStruct.NVIC_IRQChannelSubPriority = 0;
    
    NVIC_Init(&NVIC_InitStruct);
}

void EXTI3_IRQHandler(void) {
    if (EXTI_GetFlagStatus(EXTI_Line3) != RESET) {
        if (rising == 0) { // When pressing button, instantly rising is 1
            rising = 1;
            falling = 0;
        } else if (rising == 1) { // When released, instantly falling edge is 1
            falling = 1;
            rising = 0;
        }
        for (i = 0; i < 50000; i++) { // Wait to not escape rising and falling edges
        }
        EXTI_ClearITPendingBit(EXTI_Line3);
    }
}
void Time_Config(void) {
    // Setting for timer interrupt
    RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2, ENABLE);

    TIM_TimeBaseStructure.TIM_Period = 999; // TIM2_ARR -> 1000
    TIM_TimeBaseStructure.TIM_Prescaler = 719; // PWM frequency 100Hz
    TIM_TimeBaseStructure.TIM_ClockDivision = TIM_CKD_DIV1; // TIM_CKD_DIV1 = 0
    TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
    TIM_TimeBaseStructure.TIM_RepetitionCounter = 0;

    TIM_ITConfig(TIM2, TIM_IT_Update, ENABLE);
    TIM_TimeBaseInit(TIM2, &TIM_TimeBaseStructure);

    TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1; // TIM2_CCMR1
    TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable; // TIM2_CCER
    TIM_OC1Init(TIM2, &TIM_OCInitStructure);

    TIM_Cmd(TIM2, ENABLE);
}

void pwm_increase(void) { // When the button is pressed, it enters this function to increase the brightness every 10 ms.
    if (brightness < 1000 && time_count % 2 == 0) { // It goes into this every 20ms when long-pressed.
        brightness += 5; // Brightness change from 0% to 100% in 4 seconds.
    }
    TIM_OCInitStructure.TIM_Pulse = brightness;
    TIM_OC1Init(TIM2, &TIM_OCInitStructure);
}

void pwm_decrease(void) { // When the button is pressed, it enters this function to decrease the brightness every 10 ms.
    if (brightness > 0 && time_count % 2 == 0) { // It goes into this every 20ms.
        brightness -= 5; // Brightness change from 0% to 100% in 4 seconds when long-pressed.
    }
    TIM_OCInitStructure.TIM_Pulse = brightness;
    TIM_OC1Init(TIM2, &TIM_OCInitStructure);
}

void pwm_flashlight(int flashlight_brightness) {
    if (flashlight_counter < 500) { // Flash take on for 0-500ms.
        TIM_OCInitStructure.TIM_Pulse = flashlight_brightness; // Flashlight value goes to TIM2_CCR1 -> duty cycle = TIM2_CCR1 / TIM2_ARR.
    } else if (flashlight_counter < 1000) {
        TIM_OCInitStructure.TIM_Pulse = 0; // Flash take off for 500ms-1000ms.
    } else {
        flashlight_counter = 0;
    }
    TIM_OC1Init(TIM2, &TIM_OCInitStructure);
    flashlight_counter += 10;
}

void SysTick_Handler(void) { // Every 10 ms SysTick counter increases.
    systick_time_flag = 1;

    if (rising == 1) { // Measures the time between push and release button.
        if (long_click == 1) {
            counter += 10; // In 10 ms, the counter increases by 10.
            if (counter >= 1000) {
                if (direction == 0) { // Determines increasing and decreasing brightness.
                    pwm_increase();
                } else if (direction == 1) {
                    pwm_decrease();
                }
            }
        } else if (long_click == 0) { // Enters to activate long click when the button is pressed.
            counter += 10;
            if (counter > 1000) {
                long_click = 1;
                if (direction == 0 && state == 1) { // Determines the direction of increasing and decreasing brightness.
                    direction = 1;
                } else if (direction == 1 && state == 1) {
                    direction = 0;
                }
            }
        }
    } else if (falling == 1) { // According to time, next step is actualized.
        long_click = 0;
        if (counter > 0 && counter < 1000) { // Shorter than 1 second action -> short press or double click.
            short_click_flag = 1;
            short_click_counter += 1; // Passes through the falling edge and determines how many times a button is pressed.
            counter = 0; // Counter reset for selecting short press or double click.
        } else if (counter > 200 && counter < 1000) { // When no action between 200ms and 1000ms, it's a short click.
            short_click = 1;
        }
        if (short_click_flag == 1) {
            countdown -= 10; // 200ms countdown.
            if (countdown < 0) {
                if (short_click_counter % 2 == 0) { // Double click = blinking.
                    double_click = 1;
                    short_click = 0;
                    short_click_counter = 0;
                } else if (short_click_counter % 2 == 1) { // Single click = toggle LED on/off.
                    double_click = 0;
                    short_click = 1;
                    short_click_counter = 0;
                }
                short_click_flag = 0;
                countdown = 200; // Countdown reset.
            }
        }
        counter = 0;
    }

    time_count += 1; // 10 ms
    if (time_count > 10000) {
        time_count = 0;
    }
}
int main(void) {
    GPIO_Config();
    EXTI_Config();
    Time_Config();

    SysTick_Config(SystemCoreClock / 100); // 10 ms (100Hz)

    while (1) {
        switch (state) {
            case LED_OFF: // LED off
                brightness = 0;
                direction = 1;
                TIM_OCInitStructure.TIM_Pulse = brightness; // Brightness value goes to TIM2_CCR1 -> duty cycle = TIM2_CCR1 / TIM2_ARR
                TIM_OC1Init(TIM2, &TIM_OCInitStructure); // A0 pin output control 

                if (short_click == 1 && initial == 0) {
                    brightness = flashlight_brightness; // Flashlight_brightness is a buffer
                    short_click = 0;
                    brightness = 200;
                    state = LED_ON;
                }

                if (short_click == 1 && initial == 1) {
                    brightness = flashlight_brightness; // Flashlight_brightness is a buffer
                    short_click = 0;
                    state = LED_ON;
                }

                if (double_click_flag == 1) {
                    double_click_flag = 0;
                    state = BLINK;
                }
                break;
            case LED_ON:
                TIM_OCInitStructure.TIM_Pulse = brightness;
                TIM_OC1Init(TIM2, &TIM_OCInitStructure);
                flashlight_brightness = brightness;

                if (double_click == 1) {
                    flashlight_brightness = brightness; // Brightness is a buffer
                    double_click = 0;
                    short_click = 0;
                    flashlight_counter = 0;
                    state = BLINK;
                } else if (short_click == 1) {
                    short_click = 0;
                    state = LED_OFF;
                }

                initial = 1;
                break;
            case BLINK: // Flashlight
                if (systick_time_flag == 1) {
                    systick_time_flag = 0;
                    pwm_flashlight(flashlight_brightness); // Bright constant brightness value 
                } else if (double_click == 1) {
                    short_click = 0;
                    double_click = 0;
                    state = LED_ON;
                } else if (short_click == 1) {
                    short_click = 0;
                    state = LED_OFF;
                }
                initial = 1;
                break;
        }
    }
}
